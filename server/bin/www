#!/usr/bin/env node

const app = require("../app")
const debug = require("debug")("backend:server")
const server = require("http").createServer(app.main)
const db = require("../db/db")

const port = process.env.PORT || 5000
app.main.set("port", port)

// @ts-ignore
const io = require("socket.io")(server, {
	cors: {
		origin: [process.env.ORIGIN_URL, process.env.SERVER_URL],
		methods: ["GET", "POST"],
		credentials: true,
	},
})
require("../socketAPI")(io, app.sessionMiddleware)

server.listen(port)
server.on("error", onError)
server.on("listening", onListening)

function onError(error) {
	if (error.syscall !== "listen") throw error

	const bind = typeof port === "string" ? "Pipe " + port : "Port " + port
	// Handle specific listen errors with friendly messages.
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges")
			process.exit(1)
		case "EADDRINUSE":
			console.error(bind + " is already in use")
			process.exit(1)
		default:
			throw error
	}
}

function onListening() {
	const addr = server.address()
	const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
	debug("Listening on " + bind)
}
